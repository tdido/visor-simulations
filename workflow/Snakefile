
configfile: "config/config.yaml"


GENOME_FILE = config['genome_file']

STAGE_LIST = config['stage_list']

COVERAGE = config['coverage']

REPLICATES_LIST = config['replicates']


def get_resource(rule, resource):
    try:
        return config["resources"][rule][resource]
    except KeyError:
        return config["resources"]["default"][resource]


rule all:
    input:
        [f"results/{stage}_{COVERAGE}x_{replicate}_sniffles" for stage in STAGE_LIST for replicate in REPLICATES_LIST],
        [f"results/{stage}_{COVERAGE}x_{replicate}_svision" for stage in STAGE_LIST for replicate in REPLICATES_LIST],
        [f"results/{stage}_{COVERAGE}x_{replicate}_severus" for stage in STAGE_LIST for replicate in REPLICATES_LIST]


rule visor_hack:
    input:
        fasta = f"resources/genome/{GENOME_FILE}",
        bed1 = f"resources/{{stage}}/HACk.h1.bed",
        bed2 = f"resources/{{stage}}/HACk.h2.bed"
    output:
        h1_fa = f"results/{{stage}}_HACk/h1.fa",
        h1_fa_fai = f"results/{{stage}}_HACk/h1.fa.fai",
        h2_fa = f"results/{{stage}}_HACk/h2.fa",
        h2_fa_fai = f"results/{{stage}}_HACk/h2.fa.fai",
        folder = directory(f"results/{{stage}}_HACk")
    log:
        f"results/log/visor_hack/{{stage}}.log"
    benchmark:
        f"results/log/visor_hack/{{stage}}.bmk"
    threads: get_resource("visor_hack", "threads")
    resources:
        mem_mb=get_resource("visor_hack", "mem_mb"),
        runtime=get_resource("visor_hack", "runtime"),
        slurm_partition=get_resource("visor_hack", "partition")
    conda:
        "envs/visor.yaml"
    shell:"""
        VISOR HACk \
            -b {input.bed1} {input.bed2} \
            -g {input.fasta} \
            -o {output.folder} \
            > {log} 2>&1
    """


rule generate_bed:
    input:
        rules.visor_hack.output.h1_fa,
        rules.visor_hack.output.h2_fa,
        rules.visor_hack.output.h1_fa_fai,
        rules.visor_hack.output.h2_fa_fai,
    output:
        f"results/{{stage}}_HACk/laser.simple.bed"
    log:
        f"results/log/generate_bed/{{stage}}.log"
    benchmark:
        f"results/log/generate_bed/{{stage}}.bmk"
    threads: get_resource("generate_bed", "threads")
    resources:
        mem_mb=get_resource("generate_bed", "mem_mb"),
        runtime=get_resource("generate_bed", "runtime"),
        slurm_partition=get_resource("generate_bed", "partition")
    shell:"""
        sh workflow/scripts/makeBED.sh {wildcards.stage} {GENOME_FILE} \
        > {log} 2>&1
    """   


rule visor_laser_tumour:
    input:
        fasta = f"resources/genome/{GENOME_FILE}",
        hack_output = f"results/{{stage}}_HACk",
        bed = f"results/{{stage}}_HACk/laser.simple.bed"
    output:
        bam = f"results/{{stage}}_{COVERAGE}x_{{replicate}}_LASeR/sim.srt.bam",
        folder = directory(f"results/{{stage}}_{COVERAGE}x_{{replicate}}_LASeR")
    log:
        f"results/log/visor_laser/{{stage}}_{COVERAGE}x_{{replicate}}.log"
    benchmark:
        f"results/log/visor_laser/{{stage}}_{COVERAGE}x_{{replicate}}.bmk"
    threads: get_resource("visor_laser", "threads")
    resources:
        mem_mb=get_resource("visor_laser", "mem_mb"),
        runtime=get_resource("visor_laser", "runtime"),
        slurm_partition=get_resource("visor_laser", "partition")
    conda:
        "envs/visor.yaml"
    params:
        read_type=config['params']['read_type']
    shell:"""
        VISOR LASeR \
            -g {input.fasta} \
            -s {input.hack_output} \
            -b {input.bed} \
            -o {output.folder} \
            --threads {threads} \
            --coverage {COVERAGE} \
            --fastq --read_type {params.read_type} \
            > {log} 2>&1
    """


rule visor_laser_normal:
    input:
        fasta = f"resources/genome/{GENOME_FILE}",
        hack_output = f"results/normal_HACk",
        bed = f"results/normal_HACk/laser.simple.bed"
    output:
        bam = f"results/normal_{COVERAGE}x_LASeR/sim.srt.bam",
        folder = directory(f"results/normal_{COVERAGE}x_LASeR")
    log:
        f"results/log/visor_laser/normal_{COVERAGE}x.log"
    benchmark:
        f"results/log/visor_laser/normal_{COVERAGE}x.bmk"
    threads: get_resource("visor_laser", "threads")
    resources:
        mem_mb=get_resource("visor_laser", "mem_mb"),
        runtime=get_resource("visor_laser", "runtime"),
        slurm_partition=get_resource("visor_laser", "partition")
    conda:
        "envs/visor.yaml"
    params:
        read_type=config['params']['read_type']
    shell:"""
        VISOR LASeR \
            -g {input.fasta} \
            -s {input.hack_output} \
            -b {input.bed} \
            -o {output.folder} \
            --threads {threads} \
            --coverage {COVERAGE} \
            --fastq --read_type {params.read_type} \
            > {log} 2>&1
    """


rule sniffles:
    input:
        bam = f"results/{{stage}}_{COVERAGE}x_{{replicate}}_LASeR/sim.srt.bam",
        fasta = f"resources/genome/{GENOME_FILE}"
    output:
        directory(f"results/{{stage}}_{COVERAGE}x_{{replicate}}_sniffles"),
        vcf = f"results/{{stage}}_{COVERAGE}x_{{replicate}}_sniffles/{{stage}}.vcf"
    log:
        f"results/log/sniffles/{{stage}}_{COVERAGE}x_{{replicate}}.log"
    benchmark:
        f"results/log/sniffles/{{stage}}_{COVERAGE}x_{{replicate}}.bmk"
    threads: get_resource("sniffles", "threads")
    resources:
        mem_mb=get_resource("sniffles", "mem_mb"),
        runtime=get_resource("sniffles", "runtime"),
        slurm_partition=get_resource("sniffles", "partition")
    conda:
        "envs/sniffles.yaml"
    shell:"""
        sniffles \
            -i {input.bam} \
            -v {output.vcf} \
            -t {threads} \
            --reference {input.fasta} \
            --mosaic \
            > {log} 2>&1
    """


rule severus:
    input:
        tumor_bam = f"results/{{stage}}_{COVERAGE}x_{{replicate}}_LASeR/sim.srt.bam",
        normal_bam = f"results/normal_{COVERAGE}x_LASeR/sim.srt.bam"
    output:
        dir = directory(f"results/{{stage}}_{COVERAGE}x_{{replicate}}_severus")
    log:
        f"results/log/severus/{{stage}}_{COVERAGE}x_{{replicate}}.log"
    benchmark:
        f"results/log/severus/{{stage}}_{COVERAGE}x_{{replicate}}.bmk"
    threads: get_resource("severus", "threads")
    resources:
        mem_mb=get_resource("severus", "mem_mb"),
        runtime=get_resource("severus", "runtime"),
        slurm_partition=get_resource("severus", "partition")
    conda:
        "envs/severus.yaml"
    shell:"""
        ln -sf $(basename {input.tumor_bam}) $(dirname {input.tumor_bam})/tumor.bam
        ln -sf $(basename {input.tumor_bam}).bai $(dirname {input.tumor_bam})/tumor.bam.bai
        severus \
            --target-bam $(dirname {input.tumor_bam})/tumor.bam \
            --control-bam {input.normal_bam} \
            --out-dir {output.dir} \
            -t {threads} \
            > {log} 2>&1
    """


rule svision:
    input:
        tumor_bam = f"results/{{stage}}_{COVERAGE}x_{{replicate}}_LASeR/sim.srt.bam",
        normal_bam = f"results/normal_{COVERAGE}x_LASeR/sim.srt.bam",
        fasta = f"resources/genome/{GENOME_FILE}"
    output:
        dir = directory(f"results/{{stage}}_{COVERAGE}x_{{replicate}}_svision")
    log:
        f"results/log/svision/{{stage}}_{COVERAGE}x_{{replicate}}.log"
    benchmark:
        f"results/log/svision/{{stage}}_{COVERAGE}x_{{replicate}}.bmk"
    threads: get_resource("svision", "threads")
    resources:
        mem_mb=get_resource("svision", "mem_mb"),
        runtime=get_resource("svision", "runtime"),
        slurm_partition=get_resource("svision", "partition"),
        slurm_extra=get_resource("svision", "slurm_extra")
    conda:
        "svision"
    params:
        model=get_resource("svision", "model"),
        stage= f"{{stage}}"
    shell:"""
        ln -sf $(basename {input.tumor_bam}) $(dirname {input.tumor_bam})/tumor.bam
        ln -sf $(basename {input.tumor_bam}).bai $(dirname {input.tumor_bam})/tumor.bam.bai
        SVision-pro \
            --target_path $(dirname {input.tumor_bam})/tumor.bam \
            --base_path {input.normal_bam} \
            --genome_path {input.fasta} \
            --model_path {params.model} \
            --out_path {output.dir} \
            --sample_name {params.stage} \
            --detect_mode somatic \
            --process_num {threads} \
            > {log} 2>&1
    """