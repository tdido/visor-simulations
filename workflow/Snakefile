
configfile: "config/config.yaml"


STAGE_LIST = config['stage_list']

GENOME_URL = config['genome_url']

GENOME_FILE = config['genome_file']


def get_resource(rule, resource):
    try:
        return config["resources"][rule][resource]
    except KeyError:
        return config["resources"]["default"][resource]


rule all:
    input:
        [f"results/{stage}LASeR" for stage in STAGE_LIST]


rule visor_hack:
    input:
        fasta = f"resources/genome/{GENOME_FILE}",
        bed1 = f"resources/{{stage}}/HACk.h1.bed",
        bed2 = f"resources/{{stage}}/HACk.h2.bed"
    output:
        h1_fa = f"results/{{stage}}HACk/h1.fa",
        h1_fa_fai = f"results/{{stage}}HACk/h1.fa.fai",
        h2_fa = f"results/{{stage}}HACk/h2.fa",
        h2_fa_fai = f"results/{{stage}}HACk/h2.fa.fai",
        folder = directory(f"results/{{stage}}HACk")
    log:
        f"results/log/visor_hack/{{stage}}.log"
    benchmark:
        f"results/log/visor_hack/{{stage}}.bmk"
    threads: get_resource("visor_hack", "threads")
    resources:
        mem_mb=get_resource("visor_hack", "mem_mb"),
        runtime=get_resource("visor_hack", "runtime"),
        slurm_partititon=get_resource("visor_hack", "partition")
    conda:
        "envs/visor.yaml"
    shell:"""
        VISOR HACk -b {input.bed1} {input.bed2} -g {input.fasta} \
        -o {output.folder} 2>&1 | tee {log}
    """


rule generate_bed:
    input:
        rules.visor_hack.output.h1_fa,
        rules.visor_hack.output.h2_fa,
        rules.visor_hack.output.h1_fa_fai,
        rules.visor_hack.output.h2_fa_fai,
    output:
        f"results/{{stage}}HACk/laser.simple.bed"
    log:
        f"results/log/generate_bed/{{stage}}.log"
    benchmark:
        f"results/log/generate_bed/{{stage}}.bmk"
    threads: get_resource("generate_bed", "threads")
    resources:
        mem_mb=get_resource("generate_bed", "mem_mb"),
        runtime=get_resource("generate_bed", "runtime"),
        slurm_partititon=get_resource("generate_bed", "partition")
    shell:"""
        sh workflow/scripts/makeBED.sh {wildcards.stage} {GENOME_FILE} 2>&1 | tee {log}
    """   


rule visor_laser:
    input:
        fasta = f"resources/genome/{GENOME_FILE}",
        hack_output = f"results/{{stage}}HACk",
        bed = f"results/{{stage}}HACk/laser.simple.bed"
    output:
        directory(f"results/{{stage}}LASeR")
    log:
        f"results/log/visor_laser/{{stage}}.log"
    benchmark:
        f"results/log/visor_laser/{{stage}}.bmk"
    threads: get_resource("visor_laser", "threads")
    resources:
        mem_mb=get_resource("visor_laser", "mem_mb"),
        runtime=get_resource("visor_laser", "runtime"),
        slurm_partititon=get_resource("visor_laser", "partition")
    conda:
        "envs/visor.yaml"
    params:
        coverage=config['params']['coverage'],
        read_type=config['params']['read_type']
    shell:"""
        VISOR LASeR -g {input.fasta} -s {input.hack_output} -b {input.bed} \
        -o {output} --threads {threads} --coverage {params.coverage} \
        --fastq --read_type {params.read_type} 2>&1 | tee {log}
    """